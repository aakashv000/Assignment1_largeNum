#include<iostream>
#include<stdio.h>
#include<stdlib.h>
using namespace std;

typedef struct Node{
	int data;
	int index;
	struct Node *next=NULL;
	struct Node *prev=NULL;
}List;

List* maker(List *head,int val){

	List *new_node = new List;
	new_node->data=val;	
	
	if(head==NULL) {new_node->index=0;head=new_node;}
	else{
		List *curr=head;
		while(curr->next!=NULL){
			curr=curr->next;		
		}
		curr->next=new_node;
		new_node->prev=curr;
		new_node->index=curr->index+1;
	}
	head->prev=new_node;
	return head;
}
List* rmaker(List *head,int val){

	List *new_node = new List;
	new_node->data=val;	
	
	if(head==NULL) {new_node->index=0;head=new_node;}
	else{
		List *curr=head;
		while(curr->prev!=NULL){
			curr=curr->prev;		
		}
		curr->prev=new_node;
		new_node->next=curr;
		new_node->index=curr->index+1;
	}
	head->next=new_node;
	return head;
}

void print(List *head){
	List *temp=head;	
	while(1){
		cout << temp->data;
		temp=temp->next;
		if(temp==head) break;	
	}
}

List* mul(List *mulHead,List *head1,List *head2){
	List *tempB,*tempS;	
	if(head1->prev->index >= head2->prev->index){
		tempB=head1->prev;
		tempS=head2->prev;
	}
	else {
		tempB=head2->prev;
		tempS=head1->prev;		
	}
	int lenB=tempB->index;
	int lenS=tempS->index;	
	List *multi=tempS;
	while(1){
		List *curr=tempB;
		while(1){
			int tval=multi->data * curr->data;
			int ind= (lenS - multi->index)+(lenB - curr->index);
			int key=0;		
			List *temp=mulHead;		
			while(1){
				if(mulHead==NULL) break;			
				if(ind==temp->index){
					temp->data=temp->data+tval;
					key=1;			
				}
				temp=temp->prev;
				if(temp==NULL) break;
			}
			if(key==0){
				mulHead=rmaker(mulHead,tval);
			}
			curr=curr->prev;
			if(curr==tempB) break;
		}
		multi=multi->prev;
		if(multi==tempS) break;
	}


	List *checker=mulHead->prev;
	int carry = mulHead->data / 10;
	mulHead->data=mulHead->data % 10;
	while(checker!=NULL){
		int rem=(checker->data + carry)/10;		
		checker->data=(checker->data + carry)%10;
		carry=rem;		
		checker=checker->prev;
	}
	if(carry<10&&carry!=0) mulHead=rmaker(mulHead,carry);
	if(carry>10){mulHead=rmaker(mulHead,carry%10);mulHead=rmaker(mulHead,carry/10);}	



	return mulHead;
}

List* add(List *sumHead,List *head1,List *head2,List *l1,List *l2,int c,int key){
	if(key==0){
		sumHead=rmaker(sumHead,(l1->data+l2->data+c)%10);
		sumHead=add(sumHead,head1,head2,l1->prev,l2->prev,(l1->data+l2->data+c)/10,1);	
	}
	else{
		if(l1!=head1->prev && l2!=head2->prev){
			sumHead=rmaker(sumHead,(l1->data+l2->data+c)%10);
			sumHead=add(sumHead,head1,head2,l1->prev,l2->prev,(l1->data+l2->data+c)/10,1);		
		}
		else if(l1!=head1->prev && l2==head2->prev){
			sumHead=rmaker(sumHead,(l1->data+c)%10);
			sumHead=add(sumHead,head1,head2,l1->prev,l2,(l1->data+c)/10,1);
		}
		else if(l1==head1->prev && l2!=head2->prev){
			sumHead=rmaker(sumHead,(l2->data+c)%10);
			sumHead=add(sumHead,head1,head2,l1,l2->prev,(l2->data+c)/10,1);
		}
		else{
			if(c!=0) sumHead=rmaker(sumHead,c);
			else return sumHead;		
		}
	}
	return sumHead;
	
}

int main(){
	List *head1=NULL,*head2=NULL;
	while(1){
		int temp = getchar();
		if(temp==10) {head1->prev->next=head1;break;}//directly pressing enter will break it
		else head1=maker(head1,temp-'0');
	}
	while(1){
		int temp = getchar();
		if(temp==10){head2->prev->next=head2;break;}
		else head2=maker(head2,temp-'0');
	}
	
	List *sumHead=NULL;
	sumHead=add(sumHead,head1,head2,head1->prev,head2->prev,0,0);
	sumHead->next->prev=sumHead;
	sumHead=sumHead->next;
	
	List *mulHead=NULL;
	mulHead=mul(mulHead,head1,head2);
	mulHead->next->prev=mulHead;
	mulHead=mulHead->next;
	
	cout<<"The sum is: ";	
	print(sumHead);
	cout<<endl;
	cout<<"The product is: ";
	print(mulHead);
	cout<<endl;

}
